This directory contains the code for building, solving, and
distributing targets for the Attack Lab.

## The process of building a target

buildtarget.pl orchestrates the process of building a randomized
target and verifying that it is solvable.  Verification involves
the following steps:

1. Use readd.pl to find addresses of functions touch1, touch2, and
   touch3 from rtarget and ctarget, as well as the byte code for the
   gadget farm in rtarget.
2. Use harvest to find gadgets in the gadget farm for rtarget
2. Use addresses.pl to find stack offset and stack pointer for
   read_and_process_line
3. Use solve-all.pl to generate exploit strings.  Solve-all.pl calls
   solver.pl, which, in turn, calls programs readd.pl and exploit

## Files that are compiled as part of the target programs:

config.c, config.h
 ~ Contains site and lab-specific information.  This will need to be
   updated with each semester and each locale.

target.h
 ~ Common declarations.

driverlib.c, driverlib.h, driverhdrs.h
 ~ Autolab support

gencookie.c, gencookie.h
 ~ Generate 32-bit unique IDs.

buf.c
 ~ Function with buffer overflow vulnerability.  Provided as a
   separate file, since it is the only function that needs to be
   compiled with cookie-based stack protection turned off.

visible.c
 ~ Code for functions touch1 -- touch3.

support.c
 ~ Miscellaneous support functions.

main.c
 ~ Main function for both targets.

## Helper programs, used to construct and verify targets:

gencode.c, gencode.h
 ~ Encodings of limited class of x86-64 instructions to be used when
   building targets.

testgen.c
 ~ Testing code for gencode

genfarm.c
 ~ Generates gadget farm for rtarget.

genscramble.c
 ~ Generates code for a function scramble() that varies in length, in
   order to reposition code to different places for each target.

buildtarget.pl
 ~ Generate all files for a single target

multibuild.pl
 ~ Construct multiple targets at once.

makecookie.c
 ~ Generate a cookie (using gencookie.c) and write it to a file.

harvest.c
 ~ Find gadgets from byte stream generated by readd.pl from gadget
   farm in rtarget

exploit.c
 ~ Generate ROP exploits for specified phase

addresses.pl
 ~ Run GDB to determine stack address and offset in read_and_process_line()

readd.pl
 ~ Extract useful things from disassembled code.

solver.pl
 ~ Generate solution for single phase

solve-all.pl
 ~ Generate solutions for all phases

## Other files:

README-handout.txt
 ~ Copied into each target tarball as README.txt.

README-solve.txt
 ~ Explanation of the solution files found in each target *directory*
   (only accessible to staff, not distributed to students)

hex2raw
 ~ Utility for generating binary exploit code.
   Copied into each target tarball.

reval.pl
 ~ Utility for manual assessment of ROP gadget exploits
   (not currently used by autograder)
