#!/usr/bin/env python3

"""
This program converts hex-encoded bytes into raw bytes, or "binary form".

For example, the character "a" is represented by 0x61 in ASCII, so to output
that raw byte, you would input "61" to this program.
---

Sample usage:
    $ echo '61 62 63' | ./hex2raw
    $ ./hex2raw < sample.txt > sample.bin
    $ ./hex2raw sample.txt sample.bin

This program provides the same functionality as "xxd -r -p", but it also
supports comments. To perform the inverse operation (displaying a binary
file as hex), use "xxd", with the "-p" flag for plain output.
---

Authors:
    Kevin Geng (khg), February 2020
    Revised to support use as a library, Zack Weinberg (zweinber), February 2023
"""

import argparse
import binascii
import io
import os
import re
import sys
import signal

def convert_hex_string(text: str) -> bytes:
    # Remove all comments in the text: /* */, //, and #
    # Note: this needs to be in one regex for correctness
    text = re.sub(r"(/\*[\s\S]*?\*/)|(//.*$)|(#.*$)", "", text, flags=re.M)

    # Search for invalid characters (not hex or whitespace)
    matches = re.findall(r"[^\s0-9a-fA-F]+", text)
    if matches:
        raise ValueError(
            "invalid characters in input: "
            + ", ".join(repr(c) for c in matches)
            + "\nPlease use only hex characters: 0-9, a-f, A-F."
        )

    # Remove all whitespace
    text = re.sub(r"\s+", "", text)

    # Make sure length is correct
    if len(text) % 2 != 0:
        raise ValueError(
            "input length is odd.\n"
            "Make sure each byte is represented by two hex digits."
        )

    return binascii.unhexlify(text)


def main() -> None:
    # Be a good Unix citizen by allowing this process to be killed silently
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)
    signal.signal(signal.SIGINT, signal.SIG_DFL)

    # Parse command-line arguments
    docs = __doc__.split("---", 2)
    parser = argparse.ArgumentParser(
        description=docs[0],
        epilog=docs[1],
        formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument("INFILE",
                        nargs="?",
                        type=argparse.FileType("rt"),
                        default="-",
                        help="input file to read from "
                             "(or - for standard input)")
    parser.add_argument("OUTFILE",
                        nargs="?",
                        type=argparse.FileType("wb"),
                        default="-",
                        help="output file to write to "
                             "(or - for standard output)")
    args = parser.parse_args()

    # Print a warning if invoked with no arguments
    if args.INFILE == sys.stdin and os.isatty(sys.stdin.fileno()):
        print("Reading from standard input. "
              "For help, run '{} --help'.".format(sys.argv[0]),
              file=sys.stderr)

    # Make sure we write to stdout as binary, not text.  In newer
    # versions of Python the argparse module does this for us.
    # Preserve the name property of the original object in case we
    # need it for error messages.
    ofname = args.OUTFILE.name
    if isinstance(args.OUTFILE, io.TextIOWrapper):
        args.OUTFILE = args.OUTFILE.buffer

    with args.INFILE as infile:
        try:
            text = infile.read()
        except OSError as e:
            sys.stderr.write("ERROR: {}: {}\n".format(infile.name, e))
            sys.exit(1)
        except UnicodeDecodeError:
            sys.stderr.write(
                "ERROR: invalid, non-ASCII characters in input."
                "\nPlease use only hex characters: 0-9, a-f, A-F.\n"
            )
            sys.exit(1)

    try:
        result = convert_hex_string(text)
    except ValueError as e:
        sys.stderr.write("ERROR: {}\n".format(e))
        sys.exit(1)
    except binascii.Error as e:
        # this is a backstop; the input filtering in
        # convert_hex_string should make this impossible
        sys.stderr.write("ERROR: couldn't parse hex: {}\n".format(e))
        sys.exit(1)

    try:
        with args.OUTFILE as outfile:
            outfile.write(result)
    except OSError as e:
        sys.stderr.write("ERROR: {}: write error: {}\n".format(ofname, e))
        sys.exit(1)

    sys.exit(0)

if __name__ == "__main__":
    main()
